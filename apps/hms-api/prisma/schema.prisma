// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CandidateStatus {
  HIRED
}

enum OpportunityState {
  OPEN
  CLOSED
}

enum ResidencyStatus {
  CITIZEN
  PR
  PR_WIP
  PERMIT
  INELIGIBLE
}

enum SkillCategory {
  CLOUD_PLATFORMS
  CONCEPTS
  DATABASES
  FRAMEWORKS_AND_TECHNOLOGIES
  OPERATING_SYSTEMS
  PROGRAMMING_LANGUAGES
  TOOLS
}

model User {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  idir_id    String    @unique
  name       String
  roles      String[]
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  candidates      Candidate[]
  hiring_managers HiringManager[]

  @@map("user")
}

model DigitalTalentRole {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  classification String
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  candidates  Candidate[]
  Opportunity Opportunity[]

  @@map("digital_talent_role")
}

model Location {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  candidates    CandidateLocation[]
  opportunities OpportunityLocation[]

  @@map("location")
}

model Ministry {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code       String
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  hiring_managers HiringManager[]

  @@map("ministry")
}

model Skill {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category             SkillCategory
  name                 String
  num_years_experience Int
  created_at           DateTime      @default(now())
  updated_at           DateTime?     @updatedAt

  candidates    CandidateSkill[]
  opportunities OpportunitySkill[]

  @@map("skill")
}

model Candidate {
  id                      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assigned_to_id          String?          @db.Uuid
  role_id                 String?          @db.Uuid
  name                    String?
  email_address           String?
  linkedin_url            String?
  available_as_of_date    String?
  would_relocate          Boolean?
  num_years_exp           Int?
  residency_status        ResidencyStatus?
  status                  CandidateStatus?
  is_contacted            Boolean?
  knowledge_and_abilities String[]
  links                   String[]
  marketing_qualities     String[]
  created_at              DateTime         @default(now())
  updated_at              DateTime?        @updatedAt

  locations     CandidateLocation[]
  opportunities CandidateOpportunity[]
  skills        CandidateSkill[]
  assigned_to   User?                  @relation(fields: [assigned_to_id], references: [id])
  role          DigitalTalentRole?     @relation(fields: [role_id], references: [id])

  @@map("candidate")
}

model CandidateLocation {
  candidate_id String    @db.Uuid
  location_id  String    @db.Uuid
  rank         Int
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt

  candidate Candidate @relation(fields: [candidate_id], references: [id])
  location  Location  @relation(fields: [location_id], references: [id])

  @@id([candidate_id, location_id])
  @@map("candidate_location")
}

model CandidateOpportunity {
  candidate_id   String    @db.Uuid
  opportunity_id String    @db.Uuid
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  candidate   Candidate   @relation(fields: [candidate_id], references: [id])
  opportunity Opportunity @relation(fields: [opportunity_id], references: [id])

  @@id([candidate_id, opportunity_id])
  @@map("candidate_opportunity")
}

model CandidateSkill {
  candidate_id String    @db.Uuid
  skill_id     String    @db.Uuid
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt

  candidate Candidate @relation(fields: [candidate_id], references: [id])
  skill     Skill     @relation(fields: [skill_id], references: [id])

  @@id([candidate_id, skill_id])
  @@map("candidate_skill")
}

model HiringManager {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assigned_to_id String?   @db.Uuid
  ministry_id    String?   @db.Uuid
  name           String?
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  ministry    Ministry? @relation(fields: [ministry_id], references: [id])
  assigned_to User?     @relation(fields: [assigned_to_id], references: [id])

  @@map("hiring_manager")
}

model Team {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?
  description String?
  links       String[]
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  opportunities Opportunity[]

  @@map("team")
}

model Opportunity {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id    String           @db.Uuid
  team_id    String           @db.Uuid
  state      OpportunityState
  created_at DateTime         @default(now())
  updated_at DateTime?        @updatedAt

  candidates CandidateOpportunity[]
  locations  OpportunityLocation[]
  skills     OpportunitySkill[]
  role       DigitalTalentRole      @relation(fields: [role_id], references: [id])
  team       Team                   @relation(fields: [team_id], references: [id])

  @@map("opportunity")
}

model OpportunityLocation {
  location_id    String    @db.Uuid
  opportunity_id String    @db.Uuid
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  location    Location    @relation(fields: [location_id], references: [id])
  opportunity Opportunity @relation(fields: [opportunity_id], references: [id])

  @@id([location_id, opportunity_id])
  @@map("opportunity_location")
}

model OpportunitySkill {
  opportunity_id String    @db.Uuid
  skill_id       String    @db.Uuid
  is_mandatory   Boolean
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  opportunity Opportunity @relation(fields: [opportunity_id], references: [id])
  skill       Skill       @relation(fields: [skill_id], references: [id])

  @@id([opportunity_id, skill_id])
  @@map("opportunity_skill")
}
